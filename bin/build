#!/usr/bin/env python3
import subprocess
import sys
import json
from typing import Union

# TODO: dit komt normaal gesproken uit een of andere definitie file
services = ['nginx', 'portaal_backend', 'portaal_frontend', 'postgres']

versions = {}


def run(command) -> subprocess.CompletedProcess:
    return subprocess.run(
        command,
        shell=True,
        stderr=subprocess.PIPE,
        stdout=subprocess.PIPE,
        universal_newlines=True,
    )


def is_working_tree_dirty():
    res = run('git status --porcelain')
    return bool(res.stdout)


def get_commit_hash(ref='HEAD') -> str:
    res = run(f'git rev-parse --short {ref}')
    return res.stdout.strip()


def is_changed_since(last_change_ref, directory):
    git_diff_per_dir = 'git diff --quiet HEAD {ref} -- {directory}'
    command = git_diff_per_dir.format(ref=last_change_ref, directory=directory)
    res = run(command)
    return res.returncode == 1


def build(service, version):
    print(f'now building {service} for version={version}')
    res = run(
        "docker build -f services/{service}/Dockerfile -t demo/{service}:{version} ."
        .format(service=service, version=version))
    save_version(service, version)
    save_versions_env(versions)


def save_version(service, version):
    global versions
    with open('versions.json', mode='w') as versions_file:
        versions[service] = version
        json.dump(versions, versions_file, indent=4)


def save_versions_env(versions):
    with open('.env', mode='w') as versions_env_file:
        versions_env_file.write('# AuTo-GeneRaT3D do not modify!!!1111one\n')
        for service, version in versions.items():
            version_line = f'{service.upper()}_VERSION={version}\n'
            versions_env_file.write(version_line)


def get_version(service) -> Union[str, None]:
    global versions
    if not versions:
        try:
            with open('versions.json', mode='r') as versions_file:
                versions = json.load(versions_file)
        except FileNotFoundError:
            pass

    return versions.get(service, None)


if __name__ == "__main__":
    current_commit_hash = get_commit_hash()
    print(f'current commit hash: {current_commit_hash}')

    if is_working_tree_dirty():
        print('your working tree is dirty, commit and/or cleanup first')
        sys.exit(1)

    for service in services:
        last_service_version = get_version(service)
        print(f'- {service} ({last_service_version}):')

        if not last_service_version or is_changed_since(
                last_service_version, f'src/{service}'):
            print(f'\tREQUIRES REBUILD')
            build(service, current_commit_hash)
        else:
            print(f'\tNO CHANGE DETECTED')
